buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.7'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	// querydsl관련 명령어를 gradle탭에 생성해준다. (권장사항)
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"

}

group = 'com.security.demo'
version = '0.0.1-SNAPSHOT'



repositories {
	mavenCentral()
}

apply plugin: "io.spring.dependency-management"
dependencies {

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor("org.projectlombok:lombok") // 어노테이션이 선언된 클래스를 AnnotationProcessor 에서 처리하려면 다음과 같이 선언해야 한다.

	// SpringBoot 3.0 이후 querydsl 설정
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	// querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api'


	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.6'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'


	// TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'


	// jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'


}

tasks.named('test') {
	useJUnitPlatform()
}

def generatedPath="src/main/generated"
sourceSets {
	main.java.srcDirs += [ generatedPath ]
}

tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generatedPath))
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

clean.doLast {
	file(generatedPath).deleteDir()
}